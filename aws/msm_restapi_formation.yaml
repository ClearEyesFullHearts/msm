AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template for creating a task definition

####################################################################################
Parameters:
####################################################################################

  MSMStageName:
    Type: String
    Default: test
    Description: The name of the stage to be created, also used as NODE_ENV

  MSMTableName:
    Type: String
    Description: The name of the table to be created.

  MSMTaskImageName:
    Type: String
    Default: mft-msm-restapi.latest
    Description: Tag of the image to deploy.

  MSMSecretName:
    Type: String
    Description: The name of the secret to use.

  MSMNotifTopicName:
    Type: String
    Description: The name of the notification topic

  MSMCleanAccountLambda:
    Type: String
    Description: The name of the account cleanup lambda

  MSMCleanMessageLambda:
    Type: String
    Description: The name of the message cleanup lambda

  MSMCleanupSchedulerRole:
    Type: String
    Description: The name of the role assumed by the scheduler

####################################################################################
Resources:
####################################################################################

  BetaMSMMainManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CreateCleanupSchedule
            Effect: Allow
            Action:
              - scheduler:CreateSchedule
            Resource: '*'
          - Sid: AllowSchedulerToAssumeRole
            Effect: Allow
            Action:
              - iam:GetRole
              - iam:PassRole
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${MSMCleanupSchedulerRole}'
          - Sid: SnsPushNotification
            Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${MSMNotifTopicName}'
          - Sid: SecretManagerReadAccess
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:BetaMSMSecret-shRNxY'
          - Sid: DynamoDBIndexAndStreamAccess
            Effect: Allow
            Action:
              - dynamodb:GetShardIterator
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MSMTableName}/index/*'
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MSMTableName}/stream/*'
          - Sid: DynamoDBTableAccess
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:PutItem
              - dynamodb:DescribeTable
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MSMTableName}'

  BetaMSMMainRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref BetaMSMMainManagedPolicy

  BetaMSMTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - 'FARGATE'
      ExecutionRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole'
      TaskRoleArn: !Sub ${BetaMSMMainRole.Arn}
      Cpu: 256
      Memory: 512
      NetworkMode: 'awsvpc'
      ContainerDefinitions:
        - Name: 'msm-beta-restapi'
          Image: !Sub 'public.ecr.aws/q0f4v2r9/cantlose:${MSMTaskImageName}'
          MemoryReservation: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 4000
              Protocol: tcp
          Environment:
            - Name: 'NODE_ENV'
              Value: !Ref MSMStageName
            - Name: 'KEY_REPORT_AT'
              Value: 'mat'
            - Name: 'SECRET_LOCATION'
              Value: !Ref MSMSecretName
            - Name: 'DEBUG'
              Value: 'msm-main:*,dynamolayer:*,secrets:*,validator:*,msm-error:*'
            - Name: 'NOTIF_TOPIC'
              Value: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${MSMNotifTopicName}'
            - Name: 'CLEAN_ACCOUNT_TARGET'
              Value: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${MSMCleanAccountLambda}'
            - Name: 'CLEAN_MESSAGE_TARGET'
              Value: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${MSMCleanMessageLambda}'
            - Name: 'SCHEDULER_ROLE'
              Value: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${MSMCleanupSchedulerRole}'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-create-group: true
              awslogs-group: '/ecs/beta-msm'
              awslogs-region: !Sub '${AWS::Region}'
              awslogs-stream-prefix: 'ecs'

  BetaMSMCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: BetaMSMCluster

  BetaMSMAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: BetaMSMAlb
      Subnets:
        - subnet-0833870d0829c0639
        - subnet-0de7e9e52a12314d3
        - subnet-0dc7ddc636c6cf60f
      Type: application
      SecurityGroups:
        - !GetAtt BetaMSMAlbSG.GroupId

  BetaMSMTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: BetaMSMTargetGroup
      VpcId: vpc-03208d77b0c881a5e
      Protocol: HTTP
      Port: 4000
      HealthCheckPath: /health/
      TargetType: ip

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref BetaMSMTargetGroup
          Type: forward
      LoadBalancerArn: !Ref BetaMSMAlb
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Sub 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/a59a9300-8810-4c0f-a13b-e4e7501a97b9'

  BetaMSMAlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Beta Msm ALB
      GroupName: BetaMSMAlbSG
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: TCP
          Description: 'Inbound rule for HTTPS traffic'
        - CidrIp: 172.31.0.0/16
          FromPort: 4000
          ToPort: 4000
          IpProtocol: TCP
          Description: 'Inbound rule for container traffic'

  BetaMSMService:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
    Properties:
      LaunchType: FARGATE
      Cluster:
        Ref: 'BetaMSMCluster'
      DesiredCount: 1
      TaskDefinition:
        Ref: 'BetaMSMTaskDefinition'
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt BetaMSMAlbSG.GroupId
          Subnets: ['subnet-0833870d0829c0639','subnet-0de7e9e52a12314d3','subnet-0dc7ddc636c6cf60f']
      LoadBalancers:
        - TargetGroupArn:
            Ref: BetaMSMTargetGroup
          ContainerPort: 4000
          ContainerName: msm-beta-restapi
