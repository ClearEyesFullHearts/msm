AWSTemplateFormatVersion: 2010-09-09
Description: >
  Resources needed to deploy a serverless chat app with a WebSocket API, Lambda and DynamoDB.

####################################################################################
Parameters:
####################################################################################

  MSMStageName:
    Type: String
    Default: test
    Description: The name of the stage to be created, also used as NODE_ENV

  MSMTableName:
    Type: String
    Default: MyTestTable
    Description: The name of the table to be created.

  MSMSecretName:
    Type: String
    Default: test
    Description: The name of the secret to use.

  MSMSecretID:
    Type: String
    Default: test
    Description: The id of the secret to use.

  MSMApiDomainName:
    Type: String
    Default: socktest.ysypya.com
    Description: API Domain name

  MSMApiCertificateID:
    Type: String
    Description: The ID of the certificate for the domain.

  MSMHostedZoneID:
    Type: String
    Description: The ID of the hosted zone

  ConnectHandlerImageName:
    Type: String
    Default: mft-msm-ws-connect.test
    Description: Tag of the image to deploy.

  DisconnectHandlerImageName:
    Type: String
    Default: mft-msm-ws-disconnect.test
    Description: Tag of the image to deploy.

  FallbackHandlerImageName:
    Type: String
    Default: mft-msm-ws-fallback.test
    Description: Tag of the image to deploy.

####################################################################################
Resources:
####################################################################################

  WssLambdaMSMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: SecretManagerReadAccess
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${MSMSecretID}'
          - Sid: DynamoDBTableAccess
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:PutItem
              - dynamodb:DescribeTable
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
            Resource: 
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MSMTableName}'
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MSMTableName}/index/ConnectionIDIndex'

  WssLambdaMSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref WssLambdaMSMPolicy
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'

  MSMConnectHandler:
    Type: AWS::Lambda::Function
    Properties:
      PackageType: Image
      Code:
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cantlose:${ConnectHandlerImageName}'
      MemorySize: 512
      Role: !Sub ${WssLambdaMSMRole.Arn}
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          NODE_ENV: !Ref MSMStageName
          DEBUG: 'dynamolayer:*,secrets:*,auth:*,ws-connect:*'
          SECRET_LOCATION: !Ref MSMSecretName
          CONNECT_BROADCAST: true
    DependsOn:
      - WssLambdaMSMPolicy
      - WssLambdaMSMRole

  MSMFallbackHandler:
    Type: AWS::Lambda::Function
    Properties:
      PackageType: Image
      Code:
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cantlose:${FallbackHandlerImageName}'
      MemorySize: 512
      Role: !Sub ${WssLambdaMSMRole.Arn}
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          NODE_ENV: !Ref MSMStageName
          DEBUG: 'dynamolayer:*,ws-fallback:*'
    DependsOn:
      - WssLambdaMSMPolicy
      - WssLambdaMSMRole

  MSMDisconnectHandler:
    Type: AWS::Lambda::Function
    Properties:
      PackageType: Image
      Code:
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cantlose:${DisconnectHandlerImageName}'
      MemorySize: 512
      Role: !Sub ${WssLambdaMSMRole.Arn}
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          NODE_ENV: !Ref MSMStageName
          DEBUG: 'dynamolayer:*,ws-disconnect:*'
          CONNECT_BROADCAST: true
    DependsOn:
      - WssLambdaMSMPolicy
      - WssLambdaMSMRole

  BaseDefaultHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
            exports.handler = async function (event, context) {
              console.log('default event', event);
              console.log('default context', context);
            
              return {
                statusCode: 404,
              };
            };
      Role: !GetAtt WssLambdaMSMRole.Arn
      TracingConfig:
        Mode: Active
      Handler: index.handler
      Runtime: nodejs14.x
    DependsOn:
      - WssLambdaMSMPolicy
      - WssLambdaMSMRole

  MsmWssApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'msm-wss-${MSMStageName}'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  MsmWssApiConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt MSMConnectHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MsmWssApi}/*/*$connect'

  MsmWssApiConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MsmWssApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join 
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt 
            - MSMConnectHandler
            - Arn
          - /invocations

  MsmWssApiConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MsmWssApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${MsmWssApiConnectIntegration}'

  MsmWssApiFallbackPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt MSMFallbackHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MsmWssApi}/*/*fallback'

  MsmWssApiFallbackIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MsmWssApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join 
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt 
            - MSMFallbackHandler
            - Arn
          - /invocations

  MsmWssApiFallbackRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MsmWssApi
      RouteKey: fallback
      AuthorizationType: NONE
      Target: !Sub 'integrations/${MsmWssApiFallbackIntegration}'

  MsmWssApiDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt MSMDisconnectHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MsmWssApi}/*/*$disconnect'

  MsmWssApiDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MsmWssApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join 
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt 
            - MSMDisconnectHandler
            - Arn
          - /invocations

  MsmWssApiDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MsmWssApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${MsmWssApiDisconnectIntegration}'

  MsmWssApiDefaultPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt BaseDefaultHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MsmWssApi}/*/*$default'

  MsmWssApiDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MsmWssApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join 
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt 
            - BaseDefaultHandler
            - Arn
          - /invocations

  MsmWssApiDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MsmWssApi
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Sub 'integrations/${MsmWssApiDefaultIntegration}'

  MsmWssCurrentStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref MsmWssApi
      StageName: !Ref MSMStageName
      AutoDeploy: true

  MsmWssManageConnectionsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'execute-api:ManageConnections'
            Effect: Allow
            Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MsmWssApi}/${MSMStageName}/*/@connections/*'
        Version: 2012-10-17
      PolicyName: MsmWssManageConnectionsPolicy
      Roles:
        - !Ref WssLambdaMSMRole

  MSMWssDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref MSMApiDomainName
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Sub 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${MSMApiCertificateID}'

  MSMWssExpressAPIPathMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref MsmWssApi
      DomainName: !Ref MSMWssDomainName
      Stage: !Ref MsmWssCurrentStage

  MSMWssExpressAPIRoute53RecordSet:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref MSMHostedZoneID
      RecordSets:
      - Name: !Ref MSMWssDomainName
        Type: A
        AliasTarget:
          EvaluateTargetHealth: false
          HostedZoneId: !GetAtt MSMWssDomainName.RegionalHostedZoneId
          DNSName: !GetAtt MSMWssDomainName.RegionalDomainName
  
####################################################################################
Outputs:
####################################################################################

  APIId:
    Value: !Ref MsmWssApi
    Description: ID of the Web Socket API Getaway

  WSSEndpoint:
    Value: !Sub 'wss://${MsmWssApi}.execute-api.${AWS::Region}.amazonaws.com/${MSMStageName}'
    Description: Url of the web socket endpoint