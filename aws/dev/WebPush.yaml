AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Parameters:
  PublicVapidKey:
    Type: String
    Default: BGHT_yJc1YI9fMpPVcDKITgRlOdlkQ1or2RZ7ObNKs5Rj9ph1KPGR6Klye31sTPBYk01GE5JZkqh-WcqKKuR-TQ
  PrivateVapidKey:
    Type: String
    Default: Vvn4Y6jrAZ-L7CL5gstrMVbxjST11dQ8lsNLoJkLw0I
  VapidSubject:
    Type: String
    Default: mailto:contact@example.com
Resources:
  subscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: topic
        AttributeType: S
      - AttributeName: subscription
        AttributeType: S
      KeySchema:
      - AttributeName: topic
        KeyType: HASH
      - AttributeName: subscription
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  snsTopic:
    Type: AWS::SNS::Topic
  awsAppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - appsync.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
  appSyncAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: dynamodb-access
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: dynamodb:*
          Resource:
          - Fn::GetAtt:
            - subscriptionsTable
            - Arn
        - Effect: Allow
          Action: sns:Publish
          Resource:
            Ref: snsTopic
      Roles:
      - Ref: awsAppSyncServiceRole
  sendPushNotificationsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendPush.handler
      Runtime: nodejs12.x
      CodeUri: s3://medium-templates/c7715631affe2673fa58dcd4bd14ea5c
      MemorySize: 128
      Timeout: 900
      Environment:
        Variables:
          SubscriptionsTable:
            Ref: subscriptionsTable
          PushSubject:
            Ref: VapidSubject
          PushPublicKey:
            Ref: PublicVapidKey
          PushPrivateKey:
            Ref: PrivateVapidKey
      Events:
        SnsTrigger:
          Type: SNS
          Properties:
            Topic:
              Ref: snsTopic
      Policies:
      - AWSLambda_FullAccess
      - Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: dynamodb:Query
          Resource:
          - Fn::GetAtt:
            - subscriptionsTable
            - Arn
  subscriptionsTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt:
        - graphQLApi
        - ApiId
      Name: subscriptionsTableDataSource
      Description: messagesTable DynamoDB data source
      Type: AMAZON_DYNAMODB
      ServiceRoleArn:
        Fn::GetAtt:
        - awsAppSyncServiceRole
        - Arn
      DynamoDBConfig:
        TableName:
          Ref: subscriptionsTable
        AwsRegion:
          Ref: AWS::Region
  graphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}
      AuthenticationType: API_KEY
  graphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - graphQLApi
        - ApiId
      Definition: "type Query {\n  test: String\n}\ntype Mutation {\n  subscribe(topic:\
        \ String, subscription: String): String @aws_cognito_user_pools\n}\n"
  subscribeResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - graphQLApi
        - ApiId
      TypeName: Mutation
      FieldName: subscribe
      DataSourceName:
        Fn::GetAtt:
        - subscriptionsTableDataSource
        - Name
      RequestMappingTemplate: "{\n    \"version\" : \"2017-02-28\",\n    \"operation\"\
        \ : \"PutItem\",\n    \"key\" : {\n        \"topic\": { \"S\" :  \"$ctx.args.topic\"\
        \ },\n        \"subscription\": $util.dynamodb.toDynamoDBJson($ctx.args.subscription)\n\
        \    }\n}\n"
      ResponseMappingTemplate: $util.toJson($ctx.result.subscription)
