AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Express Application/API powered by API Gateway and Lambda
Parameters:
  DomainName:
    Type: String
    Description: API Domain name
    Default: ''
Conditions:
  UseDomainName:
    Fn::Not:
    - Fn::Equals:
      - Ref: DomainName
      - ''
Resources:
  MyApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: UseDomainName
    Properties:
      DomainName:
        Fn::Sub: '*.${DomainName}'
      DomainValidationOptions:
      - DomainName:
          Fn::Sub: '*.${DomainName}'
        ValidationDomain:
          Ref: DomainName
      SubjectAlternativeNames:
      - Ref: DomainName
  
  MyApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: UseDomainName
    Properties:
      CertificateArn:
        Ref: MyApiCertificate
      DomainName:
        Ref: DomainName
  
  MyApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: UseDomainName
    Properties:
      RestApiId:
        Ref: ExpressApi
      DomainName:
        Ref: MyApiDomainName
      BasePath: (none)
      Stage: prod
  
  Route53HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: UseDomainName
    Properties:
      Name:
        Ref: DomainName
  
  MyApiRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: UseDomainName
    Properties:
      HostedZoneId:
        Ref: Route53HostedZone
      RecordSets:
      - Name:
          Fn::Sub: ${DomainName}.
        Type: A
        AliasTarget:
          EvaluateTargetHealth: false
          HostedZoneId:
            Fn::GetAtt:
            - MyApiDomainName
            - DistributionHostedZoneId
          DNSName:
            Fn::GetAtt:
            - MyApiDomainName
            - DistributionDomainName
  
  ExpressLambdaFunction:
    Properties:
      Code:
        S3Bucket: bucket
        S3Key: value
      Handler: main.handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - ExpressLambdaFunctionRole
        - Arn
      Runtime: nodejs18.x
      Tags:
      - Key: lambda:createdBy
        Value: SAM
      Timeout: 30
    Type: AWS::Lambda::Function
  
  ExpressLambdaFunctionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
      - Key: lambda:createdBy
        Value: SAM
    Type: AWS::IAM::Role
  
  ExpressLambdaFunctionProxyApiRootPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ExpressLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*
        - __ApiId__:
            Ref: ExpressApi
          __Stage__: '*'
    Type: AWS::Lambda::Permission
  
  ExpressApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        info:
          version: '1.0'
          title:
            Ref: AWS::StackName
        paths:
          $default:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub:
arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExpressLambdaFunction.Arn}/invocation
s
                payloadFormatVersion: '2.0'
              isDefaultRoute: true
              responses: {}
        openapi: 3.0.1
  
  ExpressApiApiGatewayDefaultStage:
    Properties:
      ApiId:
        Ref: ExpressApi
      AutoDeploy: true
      StageName: $default
      Tags:
        httpapi:createdBy: SAM
    Type: AWS::ApiGatewayV2::Stage


  MSMMainAPIIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MSMMainExpressAPI
      PayloadFormatVersion: 2.0
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MSMMainAPILambdaFunction.Arn}/invocations
      RequestParameters:
        "overwrite:path": "$request.path"

        
Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value:
      Fn::Sub:
https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${ExpressLambdaFunction}
  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value:
      Fn::Sub:
https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ExpressApi}/stages/prod
  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value:
      Fn::Sub: https://${ExpressApi}.execute-api.${AWS::Region}.amazonaws.com/
  LambdaFunctionName:
    Description: Name of the Serverless Express Lambda Function
    Value:
      Ref: ExpressLambdaFunction
